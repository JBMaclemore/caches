<?php

namespace WPNC\CreateNFT\API;

use Exception;
use WP_REST_Response;

if ( ! defined( 'ABSPATH' ) ) {
    exit;
}

/**
 * Provides endpoints for all miscellaneous functions. More like an helper endpoint
 */
class Misc
{
    private $namespace = "wpnc/misc";

    public function __construct()
    {
        add_action('rest_api_init', [$this, 'registerRoutes']);
    }
    public function registerRoutes()
    {
        register_rest_route($this->namespace, '/can-user-upload', array(
            'methods' => 'GET',
            'callback' => [$this, 'can_user_upload'],
            'permission_callback' => function ($request) {
                return is_user_logged_in();
            },
        ));


        register_rest_route($this->namespace, '/event/before', array(
            'methods' => 'POST',
            'callback' => [$this, 'run_event_before'],
            'permission_callback' => function ($request) {
                return is_user_logged_in();
            },
        ));


        register_rest_route($this->namespace, '/event/after', array(
            'methods' => 'POST',
            'callback' => [$this, 'run_event_after'],
            'permission_callback' => function ($request) {
                return is_user_logged_in();
            },
        ));

        register_rest_route($this->namespace, '/upload/moralis', array(
            'methods' => 'POST',
            'callback' => [$this, 'upload_moralis'],
            'permission_callback' => function ($request) {
                return is_user_logged_in();
            },
        ));
    }

    /**
     * Endpoint for running the events before contract creation.
     * @param $request
     * @return mixed|void
     */
    public function run_event_before($request) {
        do_action('wpnc_event_before_creation_action', $request);
        return apply_filters( 'wpnc_event_before_creation_filter', $request, new WP_REST_Response(["success" => true], 200) );
    }

    /**
     * Endpoint for running the events after contract creation.
     * @param $request
     * @return mixed|void
     */
    public function run_event_after($request) {
        do_action('wpnc_event_after_creation_action', $request);
        return apply_filters( 'wpnc_event_after_creation_filter', $request, new WP_REST_Response(["success" => true], 200) );
    }

    public function can_user_upload() {
        return new WP_REST_Response([
           "can_upload" => current_user_can('upload_files')
        ], 200);
    }

    public function upload_moralis($request) {
        $apiKey = get_option("wpnc_api")["moralisApiKey"];
        $body =  json_encode([$request->get_params()]);

        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, 'https://deep-index.moralis.io/api/v2/ipfs/uploadFolder');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $body);

        $headers = array();
        $headers[] = 'Accept: application/json';
        $headers[] = 'X-Api-Key: '.$apiKey;
        $headers[] = 'Content-Type: application/json';
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            return new WP_REST_Response([
                "message" => esc_html__("Could not upload images!","wpnc")
            ], 400);
        }
        curl_close($ch);

        return new WP_REST_Response(json_decode($result), 201);
    }
}
